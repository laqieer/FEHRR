#!/usr/bin/env python3

# Path: asset/script/make_texts.py

import os
import re
import json
import opencc
import warnings
from enum import Enum

class Language(Enum):
    LANGUAGE_JAPANESE = 0
    LANGUAGE_ENGLISH = 1
    LANGUAGE_CHINESE = 2

class TextType(Enum):
    SCENARIO = 0

my_names = {
    Language.LANGUAGE_JAPANESE: 'エクラ',
    Language.LANGUAGE_ENGLISH: 'Kiran',
    Language.LANGUAGE_CHINESE: '艾克拉',
}

texts = {}

hero_faces = {}

converter = opencc.OpenCC('t2s.json')

def load_hero_faces(folder):
    for root, dirs, files in os.walk(folder):
        for file in files:
            path = os.path.join(root, file)
            with open(path, 'r') as f:
                heros = json.load(f)
                for hero in heros:
                    if hero['face_name']:
                        hero_faces[hero['id_tag']] = hero['face_name']

def show_hero_face(matched):
    hero = matched.group(1)
    if hero == 'PID_フロージ':
        hero = 'EID_フロージ'
    if hero not in hero_faces:
        warnings.warn('Hero face not found: ' + hero)
        return ' TEXT_CMD_LEFT TEXT_CMD_CLEAR '
    return ' TEXT_CMD_LEFT TEXT_CMD_CLEAR TEXT_CMD_FACE %s ' % hero_faces[hero]

# FEH text format: https://feheroes.fandom.com/wiki/Module:ScenarioArchiveToWiki
def convert_text(language, text):
    if language == Language.LANGUAGE_CHINESE:
        text = converter.convert(text) # convert to simplified Chinese
    text = text.replace('"', '\\"') # escape double quotes
    text = '"' + text + '"' # wrap with double quotes
    text = text.replace('\n', '" TEXT_CMD_NEWLINE "') # new line
    text = re.sub(r'\$WmM\S+?,ch90_\w+?,\w+\|', r'" TEXT_CMD_LEFT TEXT_CMD_CLEAR "', text) # generic face
    text = re.sub(r'\$WmM\S+?,(\w+?),\w+\|', r'" TEXT_CMD_LEFT TEXT_CMD_CLEAR TEXT_CMD_FACE \1 "', text) # face
    text = text.replace('$k', '" TEXT_CMD_WAIT "') # wait key to be pressed
    text = text.replace('$p', '" TEXT_CMD_NEWLINE "') # scroll up text
    text = re.sub(r'\$nM(\S+?)\|', show_hero_face, text) # speaker name
    text = text.replace('$Nu', my_names[language]) # summoner name
    text = text.replace('$Nf', my_names[language]) # friend name
    text = re.sub(r'\$E\w+?\|', '', text) # face expression
    text = re.sub(r'\$b\w+?\|', '', text) # background
    text = re.sub(r'\$c\d+?,\d+?,\d+?,\d+?\|', '', text) # text color
    text = re.sub(r'\$Sbp\w+?,\d+?\|', '', text) # play BGM
    text = re.sub(r'\$Sbs\d+?\|', '', text) # stop BGM
    text = re.sub(r'\$Sbv\d+?,\d+?\|', '', text) # BGM volume
    text = re.sub(r'\$Ssp\w+?\|', '', text) # play SE
    text = re.sub(r'\$Fo\d+?,\d+?,\d+?,\d+?,\d+?\|', '', text) # fade out
    text = re.sub(r'\$Fi\d+?\|', '', text) # fade in
    text = re.sub(r'\$w\w+?\|', '', text) # unknown
    text = re.sub(r'^""', '', text) # remove empty strings at the beginning
    text = re.sub(r'""$', '', text) # remove empty strings at the end
    text = text.strip() # remove leading and trailing spaces
    if 'TEXT_CMD_FACE' in text:
        text += ' TEXT_CMD_CLEAR'
    if '$' in text:
        warnings.warn('$ remains in text: ' + text)
    return text

def read_texts(type, language, folder):
    if type not in texts:
        texts[type] = {}
    for root, dirs, files in os.walk(folder):
        for file in files:
            if re.match(r'S\d{4}\.json$', file):
                path = os.path.join(root, file)
                with open(path, 'r') as f:
                    kvs = json.load(f)
                    for kv in kvs:
                        if kv['key'] in ('MID_SCENARIO_OPENING', 'MID_SCENARIO_ENDING', 'MID_SCENARIO_MAP_BEGIN', 'MID_SCENARIO_MAP_END'):
                            key = kv['key'] + '_' + os.path.splitext(file)[0]
                            if key not in texts[type]:
                                texts[type][key] = {}
                            texts[type][key][language] = convert_text(language, kv['value'])

def write_texts(type, filename):
    if type not in texts:
        warnings.warn('No texts for type: ' + type)
        return
    with open(filename, 'w') as f:
        f.write('// This file is generated by make_texts.py\n')
        f.write('// Text type: %s\n' % type)
        for key in texts[type]:
            f.write('\n[' + key + '] = {\n')
            for language in Language:
                if language in texts[type][key]:
                    f.write('    [%s] = %s,\n' % (language.name, texts[type][key][language]))
                else:
                    warnings.warn('No text for key: ' + key + ', language: ' + language.name)
                    f.write('    [%s] = "",\n' % (language.name))
            f.write('},\n')

def write_header(filename):
    with open(filename, 'w') as f:
        f.write('// This file is generated by make_texts.py\n')
        f.write('\n')
        f.write('#pragma once\n')
        f.write('\n')
        text_id = 3737
        for type in texts:
            for key in texts[type]:
                f.write('#define %s %d\n' % (key, text_id))
                text_id += 1

def main():
    load_hero_faces('asset/json/files/assets/Common/SRPG/Person/')
    load_hero_faces('asset/json/files/assets/Common/SRPG/Enemy/')
    read_texts(TextType.SCENARIO, Language.LANGUAGE_JAPANESE, 'asset/json/files/assets/JPJA/Message/Scenario')
    read_texts(TextType.SCENARIO, Language.LANGUAGE_ENGLISH, 'asset/json/files/assets/USEN/Message/Scenario')
    read_texts(TextType.SCENARIO, Language.LANGUAGE_CHINESE, 'asset/json/files/assets/TWZH/Message/Scenario')
    write_texts(TextType.SCENARIO, 'include/scenarioTexts.h')
    write_header('include/texts.h')

if __name__ == '__main__':
    main()
